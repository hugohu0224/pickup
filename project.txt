前端（客戶端）職責：
用戶界面（UI）渲染
處理用戶輸入
預測和插值（用於平滑遊戲體驗）
發送用戶操作到服務器
接收服務器更新並更新本地遊戲狀態

後端（服務器）職責：
維護權威的遊戲狀態
處理遊戲邏輯
驗證客戶端操作
廣播遊戲狀態更新
處理玩家連接/斷開連接

遊戲目標：
玩家在地圖上移動並收集隨機出現的物資。
通過收集物資來獲得分數或特殊能力。

玩家操作：
玩家使用方向鍵（上、下、左、右）在網格中移動。
玩家可以使用空白鍵來拾取所在格子上的物品。

遊戲地圖：
15x15 的網格作為遊戲地圖。
每個格子可以是空的，也可以包含玩家或物品。

遊戲機制：
每個回合持續 1 分鐘。
物資會隨機出現在地圖的不同位置。
玩家不能移動到網格之外。

多人互動：
多個玩家同時在同一地圖上競爭。
玩家可以看到其他玩家的位置和動作。

實時性：
遊戲採用 WebSocket 技術實現實時通信。
使用客戶端預測和服務器確認來處理網絡延遲。

可能的擴展特性：
地圖隨機生成障礙物與物資。
不同類型的物資，各有不同的分數。
有些物資可賦予玩家臨時能力。
多房間支持，允許同時進行多場遊戲。
AI玩家，在玩家數量不足時填充。

狀態同步：
服務器定期（如每 100ms）發送完整遊戲狀態
客戶端在收到更新間隙進行插值，實現平滑移動

客戶端預測：
客戶端立即應用玩家輸入，不等待服務器確認
如果服務器狀態與預測不符，進行回滾和重新應用

數據協議：
Protocol Buffers

錯誤處理和重連：
實現斷線重連機制
客戶端保存最後已知的有效遊戲狀態


技術特點：
Nginx
TDD
Docker
TSL
GCE
預測與插值算法，處理延遲問題
玩家不可重疊，處理碰撞問題
加入AI與玩家一起遊戲
房間系統，動態生成不同的地圖
實現反作弊機制，伺服器驗證
使用protobuf來提高性能
加入監控日誌
實現壓力測試
斷開後自動重連
